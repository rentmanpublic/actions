name: Build and Release (no tag)

on:
  workflow_call:
    inputs:
      name:
        description: 'The name of the workflow, used to ensure concurrency of 1 job per repository'
        type: string
        required: true
      deploy_confirmation:
        description: 'Outcome if user manually confirmed the start of the deploy script'
        type: string
        required: true
      version_file_path:
        description: The path to the php version file
        type: string
        required: false
        default: app/version.php
      git_target_repository:
        description: The target repository for the build
        type: string
        required: true
      git_branch:
        description: The branch to build from
        type: string
        required: true
      git_target_repository_folder:
        description: The folder in which the target repository will be checked out
        type: string
        required: false
        default: target_repository_folder
      ecr_production_image_name:
        description: The name the production docker image. This is also the name of the ECR repository (optional)
        type: string
      ecr_staging_image_name:
        description: The name the staging docker image. This is also the name of the ECR repository (optional)
        type: string
      ecr_util_image_name:
        description: The name the util docker image. This is also the name of the ECR repository (optional)
        type: string
      dockerfile:
        description: Relative dockerfile to the docker file seen from the repository root. No leading slash.
        type: string
        required: true
      ecs_service_tag:
        description: 'The tag given to the service, used to find the service name'
        type: string
        required: false
      ecs_service_name:
        description: 'ECS service name'
        type: string
        required: false
      ecs_cluster:
        description: 'ECS cluster name'
        type: string
        required: true
      ecs_region:
        description: 'AWS region'
        type: string
        required: true
      translations_client:
        description: The translation client for which we get the translations, can be 'backend' or 'core'
        type: string
        required: false
      translations_directory:
        description: The directory the translations will be written to for the build to use
        type: string
        required: false
      oauth_enabled:
        description: This build uses oauth authentication and requires the configuration of keys
        type: boolean
        default: false
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS access key secret
      RENTMAN_TRANSLATION_SERVER_SECRET:
        required: false
        description: Secret to access the translation server
      OAUTH_PRIVATE_KEY:
        required: false
        description: The private key for Oauth authentication
      OAUTH_PUBLIC_KEY:
        required: false
        description: The public key for Oauth authentication
      COMPOSER_AUTH:
        required: false
        description: Composer authentication key


concurrency:
  group: ${{ inputs.name }}
  cancel-in-progress: false

jobs:
  ensure-correct-branch:
    name: Check current branch
    if: ${{ inputs.deploy_confirmation == 'DEPLOY' || inputs.deploy_confirmation == 'YOLO' }}
    runs-on: ubuntu-latest
    steps:
      - id: early_exit
        name: Checking chosen cluster and branch
        run: |
          if [ ${{ inputs.ecs_cluster }} == "RM4G" ] && [ "${{ github.ref }}" != "refs/heads/master" ]; then
            echo "Releasing to RM4G can only be done from master branch"
            exit 1
          fi

  determine-image-name:
    name: Determine image name based on environment
    needs: ensure-correct-branch
    outputs:
      image_name: ${{ steps.image_name.outputs.image_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v4
        with:
          repository: rentmanpublic/actions
          token: ${{ secrets.GITHUB_TOKEN }}
          path: actions
      - name: Check which image name to use based on enviroment
        id: image_name
        run: |
          chmod 700 actions/scripts/determine_image_name.sh
          actions/scripts/determine_image_name.sh
        env:
          SELECTED_ECS_CLUSTER: ${{ inputs.ecs_cluster }}
          PRODUCTION_IMAGE_NAME: ${{ inputs.ecr_production_image_name }}
          STAGING_IMAGE_NAME: ${{ inputs.ecr_staging_image_name }}
          UTIL_IMAGE_NAME: ${{ inputs.ecr_util_image_name }}

  determine-version:
    name: Determine the current version number
    needs: determine-image-name
    outputs:
      current_tag: ${{ steps.tag_version.outputs.previous_tag }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v4
        with:
          repository: rentmanpublic/actions
          token: ${{ secrets.GITHUB_TOKEN }}
          path: actions
          ref: master
      - name: Fetch most current tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ''
          dry_run: true

  docker-build:
    name: Build image
    needs: [determine-image-name, determine-version] # force it to wait on previous steps
    uses: rentmanpublic/actions/.github/workflows/ecr-build-and-push.yml@master
    with:
      image_name: ${{ needs.determine-image-name.outputs.image_name }}
      image_tag: latest
      dockerfile: ${{ inputs.dockerfile }}
      platforms: amd64
      version: ${{ needs.determine-version.outputs.current_tag }}
      push_images: 1
      ref: ${{ inputs.git_branch }}
      translations_client: ${{ inputs.translations_client }}
      translations_directory: ${{ inputs.translations_directory }}
      oauth_enabled: ${{ inputs.oauth_enabled }}
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TRANSLATIONS_SECRET: ${{ secrets.RENTMAN_TRANSLATION_SERVER_SECRET }}
      OAUTH_PRIVATE_KEY: ${{ secrets.OAUTH_PRIVATE_KEY }}
      OAUTH_PUBLIC_KEY: ${{ secrets.OAUTH_PUBLIC_KEY }}
      COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

  deploy:
    name: Deploy to ECS
    needs: docker-build
    uses: rentmanpublic/actions/.github/workflows/ecs-redeploy-service.yml@master
    with:
      service_name: ${{ inputs.ecs_service_name }}
      service_tag: ${{ inputs.ecs_service_tag }}
      cluster_name: ${{ inputs.ecs_cluster }}
      region: ${{ inputs.ecs_region }}
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
