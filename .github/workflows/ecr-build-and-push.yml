name: ECR build and push script
on:
  workflow_call:
    inputs:
      image_name:
        description: The name the docker image. This is also the name of the ECR repository
        type: string
        required: true
      image_tag:
        description: The tag where the image will be tagged with.
        type: string
        required: true
      version:
        description: The git version we will be deploying
        type: string
        required: false
      dockerfile:
        description: Relative dockerfile to the docker file seen from the repository root. No leading slahs.
        type: string
        required: true
      dockerfile_context:
        description: Context to build the docker image. By default this is the root of the repo (empty string). No trailing or leading slash should be added
        type: string
        default: ""
      platforms:
        description: Space separated list of platforms. For each platform a tag suffix -${platform} will be added.
        type: string
        default: amd64 arm64
      platform_default:
        description: Default platform, this one is used for the tag without the platform postfix
        type: string
        default: amd64
      aws_region:
        description: AWS region where the container registry is
        type: string
        default: eu-west-1
      push_images:
        description: When this is set to 0, images will not be pushed only a test run is done
        type: string
        default: 1
      pull_first:
        description: Docker images you need to pull first
        type: string
        default:
        required: false
      ref:
        description: hash of the commit to be checked out, in case you want to use a commit different from the one which triggered the workflow
        type: string
        default: ''
        required: false
      build_args:
        description: build argument key-value pairs seperated by space (ex "key1=value1 key2=value2 key3=value3")
        type: string
        default: ''
        required: false
      translations_client:
        description: The translation client for which we get the translations, can be 'backend' or 'core'
        type: string
        required: false
      translations_directory:
        description: The directory the translations will be written to for the build to use
        type: string
        required: false
      countries_directory:
        description: The directory the country data will be written to for the build to use
        type: string
        required: false
      oauth_enabled:
        description: This build uses oauth authentication and requires the configuration of keys
        type: boolean
        default: false
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS access ket secret
      COMPOSER_AUTH:
        required: false
        description: The token to authenticate on github
      SENTRY_AUTH_TOKEN:
        required: false
        description: The token to authenticate in Sentry
      TRANSLATIONS_SECRET:
        required: false
        description: The secret to fetch translations
      OAUTH_PRIVATE_KEY:
        required: false
        description: The private key for Oauth authentication
      OAUTH_PUBLIC_KEY:
        required: false
        description: The public key for Oauth authentication
jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest

    steps:
      # Prepare a string in "--build-arg key1=val1 --build-arg key2=val2..." format using build_args input"
      - name: Prepare build arguments
        run: |
          if [ '${{ inputs.build_args }}' != '' ]; then
            input_build_args=$(echo ${{ inputs.build_args }} | sed 's/\([^ ]*\)/--build-arg \1/g')
          else
            input_build_args=''
          fi
          echo "input_build_args=$input_build_args" >> "$GITHUB_ENV"
      # Get rid of windows line ends
      - name: Configure git to clear carriage returns
        run: git config --global core.autocrlf input
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      # Setup QEMO
      - name: Set up QEMU, required for buildx
        uses: docker/setup-qemu-action@v3
      # Copy oauth keys if available in secrets
      - name: Copy authentication secrets if available
        if: ${{ inputs.oauth_enabled }}
        run: |
          if [ -z "${{secrets.OAUTH_PRIVATE_KEY}}" ] || [ -z "${{secrets.OAUTH_PUBLIC_KEY}}" ]; then
            echo "No secrets for oauth configured"
            exit 1
          fi
            echo "${{ secrets.OAUTH_PRIVATE_KEY }}" > storage/oauth-private.key
            echo "${{ secrets.OAUTH_PUBLIC_KEY }}" > storage/oauth-public.key
      # Download translations if needed
      - name: Download translations
        if: ${{ inputs.translations_client && inputs.translations_directory }}
        run: |
          if [ -z "${{secrets.TRANSLATIONS_SECRET}}" ]; then
            echo "No secret to download translations"
            exit 1
          fi
          if [ -z "${{inputs.version}}" ]; then
            echo "Version parameter is required to download translations"
            exit 1
          fi

          echo "-----Downloading translations-----"
          pathName="locales-${{ inputs.image_name }}-${{ inputs.version }}"
          pathName=$(echo "$pathName" | sed 's/\//-/g')
          wget -S --post-data "cache=1&secret=${{secrets.TRANSLATIONS_SECRET}}&type=translations&client=${{inputs.translations_client}}&version=${{inputs.version}}" -O /tmp/$pathName https://translations.rentman.net/index.php
          unzip -o /tmp/$pathName -d ${{ inputs.translations_directory }}
          chmod -R a+r ${{ inputs.translations_directory }}
          echo "-----Translations done-----"
      # Download countries if needed
      - name: Download translations
        if: ${{ inputs.translations_client && inputs.countries_directory }}
        run: |
          if [ -z "${{secrets.TRANSLATIONS_SECRET}}" ]; then
            echo "No secret to download translations"
            exit 1
          fi
          if [ -z "${{inputs.version}}" ]; then
            echo "Version parameter is required to download translations"
            exit 1
          fi

          echo "-----Downloading translations-----"
          pathName="locales-${{ inputs.image_name }}-${{ inputs.version }}"
          pathName=$(echo "$pathName" | sed 's/\//-/g')
          wget -S --post-data "cache=1&secret=${{secrets.TRANSLATIONS_SECRET}}&type=countries&client=${{inputs.translations_client}}&version=${{inputs.version}}" -O /tmp/$pathName https://translations.rentman.net/index.php
          unzip -o /tmp/$pathName -d ${{ inputs.countries_directory }}
          chmod -R a+r ${{ inputs.countries_directory }}
          echo "-----Translations done-----"
     # Setup docker buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # Login to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # Build the images
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.image_name }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          echo "This step will build image ${ECR_REPOSITORY}:${IMAGE_TAG} for platforms: ${{inputs.platforms}}"

          # Pull required images
          if [[ -n "${{inputs.pull_first}}" ]]; then
            echo
            echo "## Pulling required images ##"
            for platform in ${{inputs.platforms}}; do
              for image in "${{inputs.pull_first}}"; do
                  echo "Pull ${ECR_REGISTRY}/${image}}"
                  docker pull --platform "linux/${platform}" "${ECR_REGISTRY}/${image}"
                  echo "Tag ${ECR_REGISTRY}/${image} --platform "linux/${platform}" as ${image}"
                  docker tag "${ECR_REGISTRY}/${image}" "${image}"
              done;
            done;
            echo "List docker images:"
            docker images
            echo
          fi

          echo
          echo "List docker buildx environment"
          docker buildx ls
          docker buildx use default

          # Find full path to docker context
          if [[ -z "${{inputs.dockerfile_context}}" ]]; then
            dockerfile_context="$GITHUB_WORKSPACE"
          else
            dockerfile_context="$GITHUB_WORKSPACE/${{inputs.dockerfile_context}}"
          fi;

          date_tag="$(date "+%Y%m%d.%H%M%S")"
          # Loop over all platforms
          for platform in ${{inputs.platforms}}; do

            # Create all tags
            tags_space_separated=""
            tags_command=""

            # Tags passed and one added with the timestamp
            for tag in ${IMAGE_TAG}
            do
              # In the commmand
              tags_command="${tags_command} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${tag}-${platform} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${date_tag}-${tag}-${platform}"

              # Readable output
              tags_space_separated="${tags_space_separated} ${ECR_REPOSITORY}:${tag}-${platform} ${ECR_REPOSITORY}:${date_tag}-${tag}-${platform}"

              # For the defalt platform, also tag it without th -${platform} suffix
              if [[ "${{inputs.platform_default}}" = "${platform}" ]]; then
                tags_command="${tags_command} -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${tag}"
                tags_space_separated="${tags_space_separated} ${ECR_REPOSITORY}:${tag}"
              fi;
            done

            # Construct command
            command="docker buildx build --build-arg COMPOSER_AUTH --build-arg SENTRY_AUTH_TOKEN ${input_build_args} --push ${tags_command} --platform "linux/${platform}" -f "${GITHUB_WORKSPACE}/${{inputs.dockerfile}}" "${dockerfile_context}""

            # Output what the plan is
            echo
            echo "## Build ${ECR_REPOSITORY}:${IMAGE_TAG}-${platform} ##"
            echo "Tags: ${tags_space_separated}"
            echo "Dockerfile: ${{inputs.dockerfile}}"
            echo "Context ${dockerfile_context}"
            echo "Platform: linux/${platform}"
            if [[ ${{inputs.platform_default}} != ${platform} ]]; then
              echo "Is default platform: "No";
            else
              echo "Is default platform: "Yes";
            fi;

            if [[ "${{inputs.push_images}}" == "1" ]]; then
              # Build
              echo "Dry run: No";
              echo "Running ${command}";
              ${command};
            else
              echo "Dry run: Yes";
              echo "Command ${command}";
            fi
          done
