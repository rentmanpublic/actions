

name: ECR build and push script
on:
  workflow_call:
    inputs:
      image_name:
        description: The name the docker image. This is also the name of the ECR repository
        type: string
        required: true
      image_tag:
        description: The tag where the image will be tagged with.
        type: string
        required: true
      dockerfile:
        description: Relative dockerfile to the docker file seen from the repository root. No leading slahs.
        type: string
        required: true
      dockerfile_context:
        description: Context to build the docker image. By default this is the root of the repo (empty string). No trailing or leading slash should be added
        type: string
        default: ""
      platforms:
        description: Space separated list of platforms. For each platform a tag suffix -${platform} will be added.
        type: string
        default: amd64 arm64
      platform_default:
        description: Default platform, this one is used for the tag without the platform postfix
        type: string
        default: amd64
      aws_region:
        description: AWS region where the container registry is
        type: string
        default: eu-west-1
      push_images:
        description: When this is set to 0, images will not be pushed only a test run is done
        type: string
        default: 1
      pull_first:
        description: Docker images you need to pull first
        type: string
        default:
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS access ket secret
      COMPOSER_AUTH:
        required: false
        description: The token to authenticate on github
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Get rid of windows line ends
      - name: Configure git to clear carriage returns
        run: git config --global core.autocrlf input
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the repository
        uses: actions/checkout@v2
      # Setup QEMO
      - name: Set up QEMU, required for buildx
        uses: docker/setup-qemu-action@v1
      # Setup docker buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      # Login to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      # Build the images
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.image_name }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
        run: |
          echo "This step will build image ${ECR_REPOSITORY}:${IMAGE_TAG} for platforms: ${{inputs.platforms}}"
          
          if [[ -n "${{inputs.pull_first}}" ]]; then
            echo 1;
            for image in "${{inputs.pull_first}}"; do
                docker pull "${ECR_REGISTRY}/${image}"
                docker tag "${ECR_REGISTRY}/${image}" "${image}"
                echo "${ECR_REGISTRY}/${image}"
                echo "${ECR_REGISTRY}/${image} ${image}"
            done;
          fi
          
          
          for platform in ${{inputs.platforms}}; do 
            if [[ -z "${{inputs.dockerfile_context}}" ]]; then
              dockerfile_context="$GITHUB_WORKSPACE"
            else
              dockerfile_context="$GITHUB_WORKSPACE/${{inputs.dockerfile_context}}"
            fi;
            echo "Context folder: ${dockerfile_context}"
            echo "Composer key used: ${COMPOSER_AUTH}"
            if [[ "${{inputs.push_images}}" == "1" ]]; then
              echo "Building (push_images=1) $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${platform} --build-arg COMPOSER_AUTH --platform linux/${platform} -f $GITHUB_WORKSPACE/${{inputs.dockerfile}} ${dockerfile_context}"
              if [[ ${{inputs.platform_default}} != ${platform} ]]; then
               docker buildx build --build-arg COMPOSER_AUTH --push -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${platform} --platform "linux/${platform}" -f "$GITHUB_WORKSPACE/${{inputs.dockerfile}}" "${dockerfile_context}"
              else
                docker buildx build --build-arg COMPOSER_AUTH --push -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${platform}  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --platform "linux/${platform}" -f "$GITHUB_WORKSPACE/${{inputs.dockerfile}}" "${dockerfile_context}"
              fi;
            else
              echo "Test run (push_images=0) $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG-${platform} --build-arg COMPOSER_AUTH --platform linux/${platform} -f $GITHUB_WORKSPACE/${{inputs.dockerfile}} ${dockerfile_context}"
            fi;
          done
