name: Production Release Code

on:
  workflow_call:
    inputs:
      version_bump:
        description: 'Choose version bump granularity'
        required: true
        type: string
        default: 'minor'
      version_file_path:
        description: The path to the php version file
        type: string
        required: false
        default: app/version.php
      target_repository:
        description: The target repository for the build
        type: string
        required: true
      target_repository_folder:
        description: The folder in which the target repository will be checked out
        type: string
        required: false
        default: target_repository_folder
      image_name:
        description: The name the docker image. This is also the name of the ECR repository
        type: string
        required: true
      dockerfile:
        description: Relative dockerfile to the docker file seen from the repository root. No leading slash.
        type: string
        required: true
      ecs_service:
        description: 'ECS service name'
        type: string
        required: true
      ecs_cluster:
        description: 'ECS cluster name'
        type: string
        required: true
      ecs_region:
        description: 'AWS region'
        type: string
        required: true


    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS access key secret

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ensure-master-branch:
    name: Check current branch
    outputs:
      status: ${{ steps.early.outputs.status }}
    runs-on: ubuntu-latest
    steps:
      - id: early
        name: Checking if current branch is master
        run: |
          if [ "${{ github.ref }}" != "refs/heads/master" ]; then
            echo "Error this can only run on master branch"
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT

  tag:
    name: Generating new GitHub tag
    needs: ensure-master-branch
    if: needs.ensure-master-branch.outputs.status == 'success'
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create new minor version tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ''
          default_bump: ${{ inputs.version_bump }}
          dry_run: true

  push-new-tag:
    name: Update version, tagging in GitHub
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v4
        with:
          repository: rentmanpublic/actions
          token: ${{ secrets.GITHUB_TOKEN }}
          path: actions
      - name: Checkout translations repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ inputs.target_repository_folder }}
      - name: Push new tag to github
        run: |
          chmod 700 actions/scripts/update_version.sh
          actions/scripts/update_version.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_TAG: ${{ needs.tag.outputs.new_tag }}
          TARGET_REPOSITORY_FOLDER: ${{ inputs.target_repository_folder }}
          VERSION_FILE_PATH: ${{ inputs.version_file_path }}

  docker-build:
    name: Build Production image
    needs: [tag,  push-new-tag]
    uses: rentmanpublic/actions/.github/workflows/ecr-build-and-push.yml@master
    with:
      image_name: ${{ inputs.image_name }}
      image_tag: latest ${{ needs.tag.outputs.new_tag }}
      dockerfile: ${{ inputs.dockerfile }}
      platforms: amd64
      push_images: 1
      ref: ${{ needs.tag.outputs.new_tag }}
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  deploy-production:
      name: Deploy to Production
      needs: docker-build
      uses: rentmanpublic/actions/.github/workflows/ecs-redeploy-service.yml@master
      with:
        service: ${{ inputs.ecs_service }}
        cluster: ${{ inputs.ecs_cluster }}
        region:  ${{ inputs.ecs_region }}
      secrets:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}