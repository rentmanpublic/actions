name: Redeploy ECS service
on:
  workflow_call:
    inputs:
      service_name:
        description: 'ECS service name'
        type: 'string'
        required: false
      service_tag:
        description: 'The tag given to the service'
        type: 'string'
        required: false
      cluster_name:
        description: 'ECS cluster name'
        type: 'string'
        required: true
      region:
        description: 'AWS region'
        type: 'string'
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS access key secret
jobs:
  redeploy:
    name: Redeploy latest image available on ECR to ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v4
        with:
          repository: rentmanpublic/actions
          token: ${{ secrets.GITHUB_TOKEN }}
          path: actions
          ref: fix/naming-conventions
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}
      - name: fetch cluster name
        id: cluster_name
        run: |
          chmod 700 actions/scripts/parse_cluster_name.sh
          actions/scripts/parse_cluster_name.sh
        env:
          ENVIRONMENT_NAME: ${{ inputs.cluster }}
          REGION: ${{ inputs.region }}
      - name: fetch service name
        id: service_name
        run: |
          chmod 700 actions/scripts/get_service_name_by_tag.sh
          actions/scripts/get_service_name_by_tag.sh
        env:
          REGION: ${{ inputs.region }}
          CLUSTER_NAME: ${{ steps.cluster_name.outputs.cluster_name }}
          SERVICE_NAME: ${{ inputs.service }}
          SERVICE_TAG: ${{ inputs.service_tag }}

      - name: Redeploy ECS service
        run: |
          echo "cluster_name = ${{ steps.cluster_name.outputs.cluster_name }}"
          aws ecs update-service --cluster ${{ steps.cluster_name.outputs.cluster_name }} --service ${{ steps.service_name.outputs.service_name }} --region ${{ inputs.region }} --force-new-deployment
