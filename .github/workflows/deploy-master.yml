name: Release

# This workflow builds, and deploys the master branch and tags it in git (this is used for a production release)
# After that the image is build and pushed to ECR (tagged as latest and with the new git tag as a version)
# And the ecs instance is redeployed to all specified regions and clusters in the config.json file in the repository deployments/workflows folder

on:
  workflow_call:
    inputs:
      deploy_confirmation:
        description: Outcome if user manually confirmed the start of the deploy script
        type: string
        required: true
      environment:
        description: The environment to build and deploy to, can be either staging or production
        required: true
        type: string
      version_bump:
        description: Choose version bump granularity for the release, can be major, minor or patch
        required: false
        type: string
        default: 'minor'
      version_file_path:
        description: The path to the php version file if needed
        type: string
        required: false
        default: app/version.php
      dockerfile:
        description: Relative dockerfile to the docker file seen from the repository root. No leading slash.
        type: string
        required: false
        default: 'deployment/dockerfiles/code/Dockerfile'
      programming_language:
        description: Choose the programming language of the project
        required: false
        type: string
        default: 'php'
      node_version:
        description: Choose the node version to use for node projects
        required: false
        type: string
        default: ''
      is_repository_protected:
        description: Set this to true if authentication is required
        type: boolean
        default: false
        required: false
      translations_client:
        description: The translation client for which we get the translations, can be 'backend' or 'core'
        type: string
        required: false
      translations_directory:
        description: The directory the translations will be written to for the build to use
        type: string
        required: false
      oauth_enabled:
        description: This build uses oauth authentication and requires the configuration of keys
        type: boolean
        default: false
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS access key id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS access key secret
      RENTMAN_CI_APP_SECRET_KEY:
        required: false
        description: Github token generation secret key
      RENTMAN_TRANSLATION_SERVER_SECRET:
        required: false
        description: Secret to access the translation server
      OAUTH_PRIVATE_KEY:
        required: false
        description: The private key for Oauth authentication
      OAUTH_PUBLIC_KEY:
        required: false
        description: The public key for Oauth authentication
      SENTRY_AUTH_TOKEN:
        required: false
        description: The token to authenticate in Sentry
      COMPOSER_AUTH:
        required: false
        description: Composer authentication key

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: false

jobs:
  check-environment:
    name: Check if proper environment is passed
    runs-on: ubuntu-latest
    steps:
      - name: Only allow staging and production
        run: |
          if [[ "${{ inputs.environment }}" == "staging" || "${{ inputs.environment }}" == "production" ]]; then
          echo "Running workflow with environment: ${{ inputs.environment }}."
          else
          echo "Invalid environment. Only 'staging' or 'production' are allowed."
          exit 1
          fi

  ensure-master-branch:
    name: Check current branch
    if: ${{ inputs.deploy_confirmation == 'DEPLOY' || inputs.deploy_confirmation == 'YOLO' }}
    runs-on: ubuntu-latest
    steps:
      - id: early
        name: Checking if current branch is master
        run: |
          if [ "${{ github.ref }}" != "refs/heads/master" ] && [ "${{ inputs.ecs_cluster }}" != "Staging" ]; then
            echo "Error this can only run on master branch"
          exit 1;
          fi

  ensure-app-ci-key:
    name: Check if app-ci-key is provided for protected repositories
    runs-on: ubuntu-latest
    steps:
      - id: ensure-app-ci-key
        run: |
          if [ ${{ inputs.is_repository_protected }} == true ] && [ -z "${{ secrets.RENTMAN_CI_APP_SECRET_KEY }}"  ]; then
            echo "Error: secret.RENTMAN_CI_APP_SECRET_KEY is not defined."
            exit 1
          fi
  tag:
    name: Generating new GitHub tag
    needs: [ensure-master-branch, ensure-app-ci-key, check-environment]
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create new minor version tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ''
          default_bump: ${{ inputs.version_bump }}
          dry_run: true

  push-new-tag:
    name: Update version, tagging in GitHub
    needs: tag
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      packages: 'write'
      actions: 'read'
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v4
        with:
          repository: rentmanpublic/actions
          token: ${{ secrets.GITHUB_TOKEN }}
          path: actions
          ref: master
      - name: Create Git Auth Token
        if: ${{ inputs.is_repository_protected == true }}
        uses: actions/create-github-app-token@v1
        id: github-token
        with:
          app-id: 1112653
          private-key: ${{ secrets.RENTMAN_CI_APP_SECRET_KEY }}
      - name: Checkout to release repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ steps.github-token.outputs.token || secrets.GITHUB_TOKEN }}
          path: target_repository_folder
          ref: ${{ github.ref }}
      - name: use node
        if: ${{ inputs.node_version != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
      - name: Push new tag to github
        run: |
          chmod 700 actions/scripts/update_version.sh
          actions/scripts/update_version.sh
        env:
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token || secrets.GITHUB_TOKEN }}
          GIT_TAG: ${{ needs.tag.outputs.new_tag }}
          TARGET_REPOSITORY_FOLDER: target_repository_folder
          VERSION_FILE_PATH: ${{ inputs.version_file_path }}
          TARGET_REPOSITORY: ${{ github.repository }}
          PROGRAMMING_LANGUAGE: ${{ inputs.programming_language }}

  determine-ecr-image-name:
    name: Determine ecr image name based on environment
    needs: push-new-tag
    outputs:
      image_name: ${{ steps.image_name.outputs.image_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout actions repository
        uses: actions/checkout@v4
        with:
          repository: rentmanpublic/actions
          token: ${{ secrets.GITHUB_TOKEN }}
          path: actions
          ref: master
      - name: Checkout to release repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ steps.github-token.outputs.token || secrets.GITHUB_TOKEN }}
          path: target_repository_folder
          ref: master
      - name: Check which image name to use based on enviroment
        id: image_name
        run: |
          chmod 700 actions/scripts/determine_image_name.sh
          actions/scripts/determine_image_name.sh
        env:
          ENVIRONMENT: ${{ inputs.environment }}
  docker-build:
    name: Build image
    needs: [tag, determine-ecr-image-name]
    uses: rentmanpublic/actions/.github/workflows/ecr-build-and-push.yml@master
    with:
      image_name: ${{ needs.determine-ecr-image-name.outputs.image_name }}
      image_tag: latest ${{ needs.tag.outputs.new_tag }}
      version: ${{ needs.tag.outputs.new_tag }}
      dockerfile: ${{ inputs.dockerfile }}
      platforms: amd64
      push_images: 1
      ref: ${{ needs.tag.outputs.new_tag }}
      translations_client: ${{ inputs.translations_client }}
      translations_directory: ${{ inputs.translations_directory }}
      oauth_enabled: ${{ inputs.oauth_enabled }}
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TRANSLATIONS_SECRET: ${{ secrets.RENTMAN_TRANSLATION_SERVER_SECRET }}
      OAUTH_PRIVATE_KEY: ${{ secrets.OAUTH_PRIVATE_KEY }}
      OAUTH_PUBLIC_KEY: ${{ secrets.OAUTH_PUBLIC_KEY }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

  deploy:
    name: Deploy to ECS
    needs: docker-build
    uses: rentmanpublic/actions/.github/workflows/ecs-redeploy-service.yml@master
    with:
        environment: ${{ inputs.environment }}
    secrets:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
